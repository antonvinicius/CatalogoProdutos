@page "/categorias"

<CrudElement Items="categorias" TotalCount="totalCount" EntityName="Categorias" CreateCallBack="() => createModal.mbox.Show()">
    <MudAutocomplete @ref="mud" Immediate="true" T="string" Placeholder="Busca" Class="mb-5" SearchFunc="@Search"
                     ResetValueOnEmptyText="true" ValueChanged="OnSearchResult" />

    @if (!string.IsNullOrEmpty(busca))
    {
        <MudButton Variant="Variant.Text" Size="Size.Small" Class="ma-2" @onclick="Limpar">Limpar</MudButton>
    }

    @foreach (var item in categorias)
    {
        <PainelCategoria Categoria="item"></PainelCategoria>
    }
</CrudElement>


<MessageModal @ref="createModal" Icone="@Icons.Filled.Create" Submit="CreateItem" Title="Cadastrar novo categoria">
    <EditForm Model="categoria" OnValidSubmit="CreateItem">
        <MudTextField Label="Nome" @bind-Value="categoria.Nome" For="() => categoria.Nome" Class="ma-3"></MudTextField>
        <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" Class="ml-auto mt-3">Cadastrar</MudButton>
    </EditForm>
</MessageModal>


@code {
    private int totalCount;
    private string busca;
    private List<string> categoriasNomes = new List<string>();
    private Categoria categoria = new Categoria();
    private List<Categoria> categorias;
    private MessageModal createModal;
    private MudAutocomplete<string> mud;

    // Função para limpar o mecanismo de busca
    void Limpar()
    {
        mud.Clear();
        busca = null;
        categorias = new List<Categoria>()
{
            new Categoria()
            {
                Id = 1,
                Nome = "Acessórios",
            },
            new Categoria()
            {
                Id = 2,
                Nome = "Computadores",
            },
            new Categoria()
            {
                Id = 3,
                Nome = "Celulares",
            }
        };
    }

    // Recarrega os items no valor passado
    void OnSearchResult(string value)
    {
        busca = value;
        if (!string.IsNullOrEmpty(value))
        {
            categorias = categorias.Where(x => x.Nome.Contains(value)).ToList();
        }
        else
        {
            categorias = new List<Categoria>()
{
            new Categoria()
            {
                Id = 1,
                Nome = "Acessórios",
            },
            new Categoria()
            {
                Id = 2,
                Nome = "Computadores",
            },
            new Categoria()
            {
                Id = 3,
                Nome = "Celulares",
            }
        };
        }
    }

    // Busca o valor passado
    async Task<IEnumerable<string>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return categoriasNomes;
        return categoriasNomes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Carrega a lista inicial dos items
    protected override void OnInitialized()
    {
        categorias = new List<Categoria>()
    {
            new Categoria()
            {
                Id = 1,
                Nome = "Acessórios",
            },
            new Categoria()
            {
                Id = 2,
                Nome = "Computadores",
            },
            new Categoria()
            {
                Id = 3,
                Nome = "Celulares",
            }
        };

        totalCount = categorias.Count;

        foreach (var item in categorias)
        {
            categoriasNomes.Add(item.Nome);
        }
    }

    // Adiciona um novo item
    void CreateItem()
    {
        categorias.Add(categoria);
        categoriasNomes.Add(categoria.Nome);
        categoria = new Categoria();
        totalCount = categorias.Count;
        createModal.mbox.Close();   
    }
}
