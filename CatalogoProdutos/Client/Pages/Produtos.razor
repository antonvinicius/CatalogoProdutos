@page "/produtos"


<CrudElement Items="produtos" TotalCount="totalCount" EntityName="Produtos" CreateCallBack="() => createModal.mbox.Show()">
    <MudAutocomplete @ref="mud" Immediate="true" T="string" Placeholder="Busca" Class="mb-5" SearchFunc="@Search"
                     ResetValueOnEmptyText="true" ValueChanged="OnSearchResult" />

    @if (!string.IsNullOrEmpty(busca))
    {
        <MudButton Variant="Variant.Text" Size="Size.Small" Class="ma-2" @onclick="Limpar">Limpar</MudButton>
    }

    @foreach (var item in produtos)
    {
        <ProductPanel Categorias="categorias" Produto="item"></ProductPanel>
    }
</CrudElement>


<MessageModal @ref="createModal" Icone="@Icons.Filled.Create" Submit="CreateItem" Title="Cadastrar novo produto">
    <EditForm Model="produto" OnValidSubmit="CreateItem">
        <MudTextField Label="Nome" @bind-Value="produto.Nome" For="() => produto.Nome" Class="ma-3"></MudTextField>
        <MudTextField Label="Preço" @bind-Value="produto.Preco" For="() => produto.Preco" Class="ma-3"></MudTextField>
        <MudSelect T="int" Label="Categoria" Strict="true">
            @foreach (var categoria in categorias)
            {
                <MudSelectItem T="int" Value="categoria.Id">@categoria.Nome</MudSelectItem>
            }
        </MudSelect>
        <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" Class="ml-auto mt-3">Cadastrar</MudButton>
    </EditForm>
</MessageModal>


@code {
    private int totalCount;
    private string busca;
    private List<string> produtosNomes = new List<string>();
    private Produto produto = new Produto();
    private List<Produto> produtos;
    private List<Categoria> categorias;
    private MessageModal createModal;
    private MudAutocomplete<string> mud;

    // Função para limpar o mecanismo de busca
    void Limpar()
    {
        mud.Clear();
        busca = null;
        produtos = new List<Produto>()
{
            new Produto()
            {
                Id = 1,
                Nome = "Smartphone Galaxy S3",
                CategoriaId = 1,
                Preco = 30.99
            },
            new Produto()
            {
                Id = 2,
                Nome = "Iphone 10",
                Preco = 83.45
            },
            new Produto()
            {
                Id = 3,
                Nome = "Notebook i5 9300 GTX 1050 Ti",
                Preco = 83.45
            }
        };
    }

    // Recarrega os items no valor passado
    void OnSearchResult(string value)
    {
        busca = value;
        if (!string.IsNullOrEmpty(value))
        {
            produtos = produtos.Where(x => x.Nome.Contains(value)).ToList();
        }
        else
        {
            produtos = new List<Produto>()
{
            new Produto()
            {
                Id = 1,
                Nome = "Smartphone Galaxy S3",
                CategoriaId = 1,
                Preco = 30.99
            },
            new Produto()
            {
                Id = 2,
                Nome = "Iphone 10",
                Preco = 83.45
            },
        new Produto()
            {
                Id = 3,
                Nome = "Notebook i5 9300 GTX 1050 Ti",
                Preco = 83.45
            }
        };
        }
    }

    // Busca o valor passado
    async Task<IEnumerable<string>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return produtosNomes;
        return produtosNomes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Carrega a lista inicial dos items
    protected override void OnInitialized()
    {
        produtos = new List<Produto>()
{
            new Produto()
            {
                Id = 1,
                Nome = "Smartphone Galaxy S3",
                CategoriaId = 1,
                Preco = 30.99
            },
            new Produto()
            {
                Id = 2,
                Nome = "Iphone 10",
                Preco = 83.45
            },
        new Produto()
            {
                Id = 3,
                Nome = "Notebook i5 9300 GTX 1050 Ti",
                Preco = 83.45
            }
        };
        categorias = new List<Categoria>()
{
            new Categoria()
            {
                Id = 1,
                Nome = "Computadores",
            },
            new Categoria()
            {
                Id = 2,
                Nome = "Acessórios"
            },
            new Categoria()
            {
                Id = 3,
                Nome = "Celulares"
            }
        };

        totalCount = produtos.Count;

        foreach (var item in produtos)
        {
            produtosNomes.Add(item.Nome);
        }
    }

    // Adiciona um novo item
    void CreateItem()
    {
        produtos.Add(produto);
        produtosNomes.Add(produto.Nome);
        produto = new Produto();
        totalCount = categorias.Count;
        createModal.mbox.Close();
    }
}
