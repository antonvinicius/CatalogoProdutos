@inject ISnackbar Snackbar
@inject HttpClient http

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Editar Produto
        </MudText>
    </TitleContent>
    <DialogContent>
        <ProdutoForm Produto="produtoModal"/>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="EditProduto">Editar</MudButton>
    </DialogActions>
</MudDialog>
@code {
    // Variaveis privadas para evitar binding com model
    private Produto produtoModal = new Produto();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Produto item { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task EditProduto()
    {
        item.Nome = produtoModal.Nome;
        item.Preco = produtoModal.Preco;
        item.CategoriaId = produtoModal.CategoriaId;

        await http.PutAsJsonAsync<Produto>($"api/produtos/{item.Id}", item);
        Snackbar.Add("Produto Editada", Severity.Success);
        MudDialog.Close(DialogResult.Ok(item));
    }

    // Inicializacao
    protected override void OnInitialized()
    {
        produtoModal.Nome = item.Nome;
        produtoModal.Preco = item.Preco;
        produtoModal.CategoriaId = item.CategoriaId;
    }
}